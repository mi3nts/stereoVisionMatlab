%% 


% # ***************************************************************************
% #   Stereo Vision - Thermal 
% #   ---------------------------------
% #   Written by: Lakitha Omal Harindha Wijeratne
% #   - for -
% #   Mints: Multi-scale Integrated Sensing and Simulation
% #   ---------------------------------
% #   Date: January 23rd, 2020
% #   ---------------------------------
% #   This module is written for generic implimentation of MINTS projects
% #   --------------------------------------------------------------------------
% #   https://github.com/mi3nts
% #   http://utdmints.info/
% #  ***************************************************************************

%% Chapter_04: Generating Overlay Parametors to map thermal dimages into left visual image 

% Single image from each of the distances are used 

clc
clear all
close all 

addpath("../dataFiles/")

addpath("../threeWayImageDataSets/utdSet4/thermal/")

addpath("../threeWayImageDataSets/utdSet4/left/")
addpath("../threeWayImageDataSets/utdSet4/leftNegative/")

addpath("../threeWayImageDataSets/utdSet4/right/")
addpath("../threeWayImageDataSets/utdSet4/rightNegative/")

load('leftAndRightParametorsNov06th.mat')
load('thermalParametorsNov06th.mat')

lengths =      {'040', ...
                '050', ...
                '060', ...
                '070', ...
                '080', ...
                '090', ...
                '100', ...
                '110', ...
                '120', ...
                '130', ...
                '140', ...
                '150', ...
                '160', ...
                '170', ...
                '180', ...
                '190', ...
                '200', ...
                '210', ...
                '220', ...
                '230', ...
                '240', ...
                '250', ...
                '260', ...
                '270', ...
                '280', ...
                '290', ...
                }



calibrations = {'040_11_05_17_56_27_', ...
                '050_11_05_17_58_28_', ...
                '060_11_05_17_58_56_', ...
                '070_11_05_17_59_24_', ...
                '080_11_05_17_59_52_', ...
                '090_11_05_18_00_28_', ...
                '100_11_05_18_00_56_', ...
                '110_11_05_18_01_17_', ...
                '120_11_05_18_01_52_', ...
                '130_11_05_18_02_27_', ...
                '140_11_05_18_02_48_', ...
                '150_11_05_18_03_23_', ...
                '160_11_05_18_03_44_', ...
                '170_11_05_18_04_41_', ...
                '180_11_05_18_05_02_', ...
                '190_11_05_18_05_44_', ...
                '200_11_05_18_06_12_', ...
                '210_11_05_18_07_08_', ...
                '220_11_05_18_07_36_', ...
                '230_11_05_18_08_05_', ...
                '240_11_05_18_08_33_', ...
                '250_11_05_18_09_29_', ...
                '260_11_05_18_10_04_', ...
                '270_11_05_18_10_32_', ...
                '280_11_05_18_11_21_', ...
                '290_11_05_18_11_57_', ...
                }

boundries=[ 390, 490 , 590 , 690 , 790, 880,...
    985 , 1080, 1180 ,1280, 1380 , 1475, 1580, ...
    1695 ,1795, 1895 ,2000, 2090 , 2190, 2340, ...
    2385 ,2540, 2600 ,2760, 2810 , 3020 ...
    ]

for n=1:length(boundries)-1
    cutoffs(n) = boundries(n)+ (boundries(n+1)-boundries(n))/2;
end            
            

            
%% For the thermal Calibration 


%% Calibration  

display("40 CM Calibration")

for n = 1 : length(calibrations)

    timeCurrent = calibrations{n};
    
    display(timeCurrent)

   % loading Images 
    frameThermal{n}            = imread(strcat(timeCurrent,'thermal.jpg'));

    frameLeft{n}               = imread(strcat(timeCurrent,'left.jpg'));
    frameLeftNegative{n}       = imread(strcat(timeCurrent,'leftNegative.jpg'));


    frameRight{n}              = imread(strcat(timeCurrent,'right.jpg'));
    frameRightNegative{n}      = imread(strcat(timeCurrent,'rightNegative.jpg'));


    % Gaining Rectified Images 
    [frameLeftRect{n}, frameRightRect{n}] = rectifyStereoImages(...
                                                          frameLeft{n},...
                                                            frameRight{n},...
                                                                stereoParamsLeftAndRight);
                                             

    [frameLeftNegativeRect{n},frameRightNegativeRect{n}] = ...
                                           rectifyStereoImages(...
                                                    frameLeftNegative{n} ,...
                                                    frameRightNegative{n},...
                                                    stereoParamsLeftAndRight);

    frameThermalRect{n}        = undistortImage(frameThermal{n},...
                                                        thermalParams);

    
    % Detecting checkerboard corners 
    [imagePointsLeft{n}   ,boardSizeLeft{n}]       = detectCheckerboardPoints(frameLeftNegativeRect{n});
    [imagePointsRight{n}  ,boardSizeRight{n}]      = detectCheckerboardPoints(frameRightNegativeRect{n});
    [imagePointsThermal{n},boardSizeThermal{n}]    = detectCheckerboardPoints(frameThermalRect{n}) ;                               

    [transformParametors{n},inlierPtsDistorted{n},inlierPtsOriginal{n}] = ...
                    estimateGeometricTransform(...
                                    imagePointsThermal{n},...
                                        imagePointsLeft{n},...
                                                'projective')
       
   figure; 

    showMatchedFeatures(frameLeftRect{n},...
                            frameThermalRect{n},...
                                inlierPtsOriginal{n},...
                                    inlierPtsDistorted{n});

   title(strcat('Matched inlier points ', lengths{n},'cm'));

   outputView{n} = imref2d(size(frameLeftRect{n}));
   thermalWarped{n} = imwarp(frameThermalRect{n},...
                        transformParametors{n},...
                           'OutputView',outputView{n});
   
   figure; 
   fusedImage{n} = imfuse(frameLeftRect{n},thermalWarped{n});
   imshow(fusedImage{n}) 
   title(strcat('Fused Image ',lengths{n},'cm'));                                 
                                    
end


save('../dataFiles/transformParametorsNov6',...
                    'transformParametors',...
                    'lengths',...
                    'calibrations',...
                    'stereoParamsLeftAndRight',...
                    'thermalParams',...
                    'boundries',...
                    'cutoffs'...
                    )

